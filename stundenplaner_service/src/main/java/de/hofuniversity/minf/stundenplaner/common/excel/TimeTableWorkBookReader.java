package de.hofuniversity.minf.stundenplaner.common.excel;

import de.hofuniversity.minf.stundenplaner.service.to.LessonTO;
import de.hofuniversity.minf.stundenplaner.service.to.TimeTableTO;
import de.hofuniversity.minf.stundenplaner.service.to.TimeTableVersionTO;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeTableWorkBookReader extends ExcelWorkbookReader<LessonTO> {

    private List<LessonTO> lessons;
    private TimeTableVersionTO versionTO;

    public TimeTableWorkBookReader(Workbook workbook) {
        super(workbook);
    }

    @Override
    public TimeTableWorkBookReader extractWorkbookSheet(String sheetName) {
        List<Row> rows = extractDataRows(workbook.getSheet(sheetName));
        List<String> headers = extractHeaders(workbook.getSheet(sheetName));
        this.lessons = new ArrayList<>(rows.size());
        for (Row row : rows) {
            Map<String, String> map = new HashMap<>(headers.size());
            for (Cell cell : row) {
                map.put(headers.get(cell.getColumnIndex()), cell.getStringCellValue());
            }
            LessonTO lessonTO = new LessonTO();
            lessonTO.readValueMap(map);
            lessons.add(lessonTO);
        }
        return this;
    }

    public TimeTableWorkBookReader extractVersionSheet(String sheetName) {
        this.versionTO = new TimeTableVersionTO();
        Map<String, String> map = new HashMap<>(3);
        Sheet sheet = workbook.getSheet(sheetName);
        if (sheet == null) {
            versionTO = new TimeTableVersionTO(
                    null, "UNKNOWN", "Created " + LocalDateTime.now(), "AUTOGENERATED VERSION"
            );
            return this;
        }
        map.put(sheet.getRow(0).getCell(0).getStringCellValue(), sheet.getRow(0).getCell(1).getStringCellValue());
        map.put(sheet.getRow(1).getCell(0).getStringCellValue(), sheet.getRow(1).getCell(1).getStringCellValue());
        map.put(sheet.getRow(2).getCell(0).getStringCellValue(), sheet.getRow(2).getCell(1).getStringCellValue());
        map.put(sheet.getRow(3).getCell(0).getStringCellValue(), sheet.getRow(3).getCell(1).getStringCellValue());
        this.versionTO.readValueMap(map);
        lessons.forEach(l -> l.setVersionId(versionTO.getId()));
        return this;
    }

    /**
     * Method to extract Timetable from Reader
     *
     * @return empty timetableTO if extract Methods haven't been called
     */
    public TimeTableTO extract() {
        return new TimeTableTO(versionTO, lessons);
    }
}
